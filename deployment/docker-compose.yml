version: '3.8'

services:
  # Ollama service for local LLM inference
  ollama:
    image: ollama/ollama:latest
    container_name: godot-rag-ollama
    ports:
      - '11434:11434'
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_KEEP_ALIVE=24h
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:11434/api/tags']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks:
      - rag-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: godot-rag-qdrant
    ports:
      - '6333:6333' # REST API
      - '6334:6334' # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:6333/health']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: godot-rag-api
    ports:
      - '8000:8000'
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - QDRANT_URL=http://qdrant:6333
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - ENVIRONMENT=production
    depends_on:
      ollama:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network

  # Streamlit Web Interface
  ui:
    build:
      context: .
      dockerfile: Dockerfile
      target: ui
    container_name: godot-rag-ui
    ports:
      - '8501:8501'
    volumes:
      - ./data:/app/data
      - ./.env:/app/.env:ro
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - API_URL=http://api:8000
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - rag-network

  # Redis for caching
  redis:
    image: redis:7.2-alpine
    container_name: godot-rag-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - rag-network

  # Model initialization service (runs once to pull models)
  ollama-init:
    image: ollama/ollama:latest
    container_name: godot-rag-ollama-init
    depends_on:
      ollama:
        condition: service_healthy
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=http://ollama:11434
    command: >
      sh -c "
        echo 'Pulling required models...' &&
        ollama pull llama3.2 &&
        ollama pull nomic-embed-text &&
        echo 'Models ready!'
      "
    restart: 'no'
    networks:
      - rag-network

volumes:
  ollama_data:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local

networks:
  rag-network:
    driver: bridge
